@page "/search/{searchterm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"

@inject HttpClient Http
@inject NavigationManager NavManager
@implements IDisposable

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm" />

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDetails Trail="_selectedTrail" />

    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
        }
    </div>
}

@code {
    private IEnumerable<Trail> _cachedSearchResults;
    private IEnumerable<Trail> _searchResults;
    private Trail _selectedTrail;

    [Parameter] public string SearchTerm { get; set; }
    [Parameter] public int? MaxLength { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allTrails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");
            _searchResults = allTrails.Where(x =>
                x.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                x.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            _cachedSearchResults = _searchResults;
            NavManager.LocationChanged += HandleLocationChanged;

            // Handle filters in case the user comes here directly with filters in the url. From a bookmark for example.
            UpdateFilters();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");
        }
    }

    private void UpdateFilters()
    {
        var filters = new List<Func<Trail, bool>>();
        NavManager.TryGetQueryString<int>("maxlength", out var maxLength);
        NavManager.TryGetQueryString<int>("maxtime", out var maxTime);

        if (maxLength > 0)
        {
            filters.Add(x => x.Length <= maxLength);
        }

        if (maxTime > 0)
        {
            filters.Add(x => x.TimeInMinutes <= maxTime * 60);
        }

        _searchResults = filters.Any()
                ? _cachedSearchResults.Where(trail => filters.All(filter => filter(trail)))
                : _cachedSearchResults;

        StateHasChanged();
    }

    private void HandleTrailSelected(Trail trail)
        => _selectedTrail = trail;

    private void HandleLocationChanged(object sender, LocationChangedEventArgs args)
        => UpdateFilters();

    public void Dispose()
        => NavManager.LocationChanged -= HandleLocationChanged;
}